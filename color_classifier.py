
from flask import Flask, render_template_string, request
from math import sqrt
import google.generativeai as genai
import os
from dotenv import load_dotenv

app = Flask(__name__)

def color_distance(c1, c2):
        return sqrt(sum((a - b) ** 2 for a, b in zip(c1, c2)))

# Load environment variables from .env file
load_dotenv()

gemini_api_key = os.getenv("GEMINI_API_KEY")
# Configure the API key
genai.configure(api_key=gemini_api_key)


def get_color_from_llm(hex_color):
    # Generate content using the Gemini model
    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(f"Given the hex color code {hex_color}, what is the closest color name or category from pink, red, orange, yellow, green, blue, violet, black, brown, grey, white? Please just provide the name.")
        return response.text
    except Exception as e:
        return f"Error: {e}"

# A function to classify RGB hex color into the given categories
def classify_color(hex_color):
    hex_color = hex_color.lstrip('#')  # Remove '#' if present
    if len(hex_color) != 6:
        return "invalid"  # Handle invalid input
    try:
        r, g, b = int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16)
    except ValueError:
        return "invalid"
    
    color_tuple = (r, g, b)
    pink_list = [(255,192,203), (255,228,225), (255,182,193), (255,105,180), (219,112,147), (255,20,147), (228,0,124), (224,33,138), (204,51,102), (252,15,192), (255,20,147), (230,62,98), (236,59,131), (226,80,152), (222,82,133), (231,84,128), (207,107,169), (222,111,161), (215,131,127), (255,92,205), (251,96,127), (255,102,204), (255,105,180), (253,108,158), (255,111,255), (248,131,121), (225,142,150), (255,119,255), (247,127,190), (230,143,172), (249,132,239), (242,141,205), (252,137,172), (247,143,167), (222,165,164), (252,142,172), (255,145,175), (255,145,164), (241,156,187), (231,172,207), (246,173,198), (255,166,201), (251,174,210), (239,187,204), (255,179,222), (232,204,215), (255,183,197), (255,182,193), (247,191,190), (250,218,221), (255,221,244), (253,221,230), (255,228,225), (255,207,241), (251,204,231), (255,193,204), (255,188,217), (244,194,194), (253,188,180), (229,204,201), (251,160,227), (239,152,170), (243,143,169), (255,135,141), (252,108,133), (217,134,149), (245,105,145), (204,136,153), (252,90,141), (255,85,163), (219,112,147), (247,83,148), (212,112,162), (170,152,169), (192,128,129), (246,74,138), (254,65,100), (255,67,164), (222,93,131), (249,66,158), (253,63,146), (255,51,204), (181,114,129), (254,40,162), (183,110,121), (206,70,118), (152,119,123), (197,75,140), (218,50,135), (222,49,99), (229,43,80), (199,67,117), (200,65,134), (227,37,107), (169,92,104), (204,57,123), (153,102,102), (255,0,127), (168,81,110), (171,78,82), (179,68,108), (199,44,72), (244,0,161), (145,95,109), (215,24,104), (224,17,95), (227,11,93), (144,93,93), (170,64,105), (181,51,137), (195,33,72), (228,0,120), (176,48,96), (194,30,86), (215,10,83), (215,0,64), (147,61,65), (171,39,79), (209,0,71), (209,0,86), (172,30,68), (195,11,78), (159,29,53), (103,72,70), (103,76,71), (102,66,77), (114,47,55)]
    red_list = [(255,0,0), (255,160,122), (240,128,128), (250,128,114), (233,150,122), (255,99,71), (205,92,92), (255,69,0), (220,20,60), (178,34,34), (139,0,0), (128,0,0), (124,10,2), (134,1,17), (128,24,24), (164,0,0), (174,12,0), (155,17,30), (124,72,72), (196,2,51), (204,0,0), (179,27,27), (174,32,41), (200,8,21), (165,42,42), (217,0,76), (230,0,38), (227,0,34), (226,6,44), (194,59,34), (242,0,60), (206,32,41), (171,75,82), (164,90,82), (255,8,0), (255,40,0), (255,0,56), (204,51,51), (218,44,67), (253,14,53), (237,28,36), (254,39,18), (203,65,84), (224,60,49), (237,41,57), (255,53,94), (233,116,81), (255,64,64), (255,83,73), (255,105,97), (255,153,153), (254,111,94), (228,113,122), (253,94,83), (230,103,113), (255,110,74), (255,90,54), (204,102,102), (235,76,66), (218,97,78), (234,60,83), (239,48,56), (204,78,92), (227,66,52), (215,59,62), (217,96,59), (190,79,98), (191,79,81), (227,38,54), (230,32,32), (255,3,62), (229,26,76), (255,0,40), (255,0,63), (255,0,79), (255,36,0), (255,56,0), (175,64,53), (232,0,13), (196,30,58), (207,16,32), (212,0,0), (211,0,63), (137,63,69), (157,41,51), (163,38,56), (169,32,62), (186,22,12), (201,0,22), (156,37,66), (190,0,50), (168,28,7), (175,0,42), (132,27,45), (153,0,0), (127,23,52), (146,0,10), (150,0,24), (112,28,28), (123,17,19), (124,28,5), (128,0,32), (101,0,11), (78,22,9), (86,3,25)]
    orange_list = [(255,165,0), (255,127,80), (255,140,0), (255,69,0), (204,85,0), (196,98,16), (232,97,0), (255,79,0), (255,69,0), (255,191,0), (255,159,0), (255,143,0), (255,140,0), (255,127,0), (255,103,0), (253,88,0), (251,153,2), (251,79,20), (237,145,33), (233,105,44), (254,90,29), (237,135,45), (255,174,66), (255,179,71), (255,204,153), (255,203,164), (255,160,137), (255,160,122), (255,200,124), (248,184,120), (255,140,105), (255,153,102), (251,171,96), (255,127,80), (255,130,67), (255,163,67), (226,114,91), (227,168,87), (227,171,87), (255,153,51), (224,141,60), (255,117,24), (255,168,18), (226,88,34), (255,126,0), (255,167,0), (255,179,0), (255,186,0), (249,77,0), (228,155,15), (210,105,30), (242,133,0), (236,88,0), (228,132,0), (203,65,11), (205,87,0)]
    yellow_list = [(255,255,0), (255,255,224), (255,248,220), (255,250,205), (240,230,140), (239,204,0), (238,230,0), (238,210,2), (255,246,0), (255,240,0), (255,239,0), (255,223,0), (255,216,0), (255,196,12), (238,255,27), (255,225,53), (254,254,51), (255,244,79), (250,218,94), (255,255,102), (253,253,150), (255,255,224), (255,248,220), (255,253,208), (255,250,205), (252,255,164), (232,244,140), (252,247,94), (251,236,93), (255,255,49), (240,225,48), (254,254,34), (245,199,26), (244,202,22), (223,255,0), (227,255,0), (253,238,0), (253,255,0), (255,247,0), (230,226,0)]
    green_list = [(0,128,0), (152,251,152), (144,238,144), (143,188,143), (173,255,47), (0,255,0), (0,255,127), (127,255,0), (50,205,50), (0,250,154), (124,252,0), (60,179,113), (46,139,87), (34,139,34), (0,100,0), (1,50,32), (0,66,37), (18,53,36), (1,68,33), (28,53,45), (0,86,63), (25,89,5), (24,69,59), (27,77,62), (0,102,0), (30,77,43), (0,107,60), (0,106,78), (0,112,60), (8,120,48), (42,128,0), (0,128,0), (23,114,69), (48,96,48), (19,136,8), (0,145,80), (53,94,59), (5,144,51), (0,153,0), (0,159,107), (0,158,96), (0,165,80), (80,125,42), (0,168,119), (34,139,34), (0,171,102), (46,139,87), (141,182,0), (79,121,66), (3,192,60), (28,172,120), (76,187,23), (143,212,0), (166,214,8), (102,176,50), (60,179,113), (120,134,107), (124,252,0), (103,146,103), (0,250,154), (50,205,50), (154,205,50), (102,255,0), (0,255,127), (60,208,112), (57,255,20), (80,200,120), (123,182,97), (173,255,47), (217,230,80), (208,219,97), (221,226,106), (143,188,143), (169,186,157), (119,221,119), (197,227,132), (118,255,122), (144,238,144), (173,223,173), (152,251,152), (152,255,152), (208,240,192), (233,255,219), (236,235,189), (216,228,188), (172,225,175), (168,228,160), (163,193,173), (201,220,135), (178,236,93), (147,197,114), (158,253,56), (189,218,87), (116,195,101), (133,187,101), (135,169,107), (208,255,20), (209,226,49), (143,151,121), (127,255,0), (191,255,0), (204,255,0), (206,255,0), (63,255,0), (115,134,120), (167,252,0), (202,224,13), (11,218,81), (139,190,27), (157,194,9), (59,122,87), (77,93,83), (86,130,3), (0,127,102), (0,127,92), (69,77,50), (33,66,30)]
    blue_list = [(0, 0, 255), (173, 216, 230), (176, 196, 222), (135, 206, 250), (135, 206, 235), (100, 149, 237), (65, 105, 225), (30, 144, 255), (0, 191, 255), (70, 130, 180), (0, 0, 205), (0, 0, 139), (25, 25, 112), (0, 0, 128), (0, 0, 57), (0, 0, 54), (0, 33, 71), (0, 49, 83), (28, 40, 65), (0, 51, 102), (0, 35, 102), (0, 65, 106), (6, 42, 120), (0, 0, 128), (0, 35, 135), (25, 25, 112), (0, 15, 137), (0, 0, 139), (0, 48, 143), (4, 22, 144), (18, 97, 128), (0, 35, 149), (0, 105, 148), (3, 80, 150), (0, 79, 152), (35, 41, 122), (0, 0, 156), (15, 77, 146), (0, 122, 165), (0, 103, 165), (0, 51, 170), (0, 47, 167), (0, 147, 175), (0, 109, 176), (16, 52, 166), (0, 149, 182), (0, 123, 184), (0, 112, 184), (0, 135, 189), (0, 127, 191), (0, 119, 190), (0, 114, 187), (72, 61, 139), (13, 152, 186), (51, 51, 153), (0, 0, 205), (0, 115, 207), (8, 146, 208), (67, 107, 149), (28, 57, 187), (83, 104, 149), (50, 74, 178), (42, 82, 190), (0, 170, 228), (25, 116, 210), (33, 171, 205), (80, 114, 167), (70, 130, 180), (2, 71, 254), (0, 204, 255), (0, 191, 255), (0, 112, 255), (65, 125, 193), (39, 59, 226), (28, 28, 240), (68, 108, 207), (93, 137, 186), (73, 151, 208), (31, 117, 254), (30, 144, 255), (119, 139, 165), (65, 105, 225), (69, 177, 232), (114, 160, 193), (65, 102, 245), (115, 169, 194), (91, 146, 229), (119, 158, 203), (79, 134, 247), (108, 160, 220), (100, 149, 237), (140, 190, 214), (128, 218, 235), (115, 194, 251), (162, 173, 208), (162, 162, 208), (153, 186, 221), (135, 206, 235), (119, 181, 254), (138, 185, 241), (137, 207, 240), (174, 198, 207), (147, 204, 234), (135, 206, 250), (176, 196, 222), (173, 216, 230), (164, 221, 237), (161, 202, 241), (176, 224, 230), (172, 229, 238), (171, 205, 239), (231, 254, 255), (188, 212, 230), (155, 196, 226), (124, 185, 232), (146, 161, 207), (113, 166, 210), (102, 153, 204), (109, 155, 195), (49, 140, 231), (96, 130, 182), (15, 192, 252), (93, 138, 168), (0, 127, 255), (63, 0, 255), (84, 90, 167), (29, 172, 214), (33, 79, 198), (21, 96, 189), (15, 82, 186), (38, 97, 156), (0, 71, 171), (0, 123, 167), (0, 20, 168), (0, 56, 168), (0, 51, 153), (18, 10, 143), (8, 69, 126), (29, 41, 81), (0, 0, 96), (0, 46, 99)]
    violet_list = [(128, 0, 128), (230, 230, 250), (216, 191, 216), (221, 160, 221), (123, 104, 238), (147, 112, 219), (106, 90, 205), (186, 85, 211), (138, 43, 226), (153, 50, 204), (148, 0, 211), (102, 51, 153), (72, 61, 139), (75, 0, 130), (102, 2, 60), (80, 64, 77), (120, 24, 74), (104, 40, 96), (159, 0, 197), (105, 53, 156), (120, 81, 169), (191, 0, 255), (82, 24, 250), (183, 104, 162), (150, 120, 182), (150, 123, 182), (148, 87, 235), (150, 111, 214), (147, 112, 219), (179, 158, 181), (177, 156, 217), (230, 230, 250), (230, 232, 250), (220, 208, 255), (204, 204, 255), (206, 200, 239), (224, 176, 255), (214, 202, 221), (216, 191, 216), (230, 168, 215), (209, 159, 232), (216, 178, 209), (231, 159, 196), (201, 160, 220), (216, 145, 239), (221, 160, 221), (191, 148, 228), (223, 115, 255), (211, 155, 203), (200, 162, 200), (203, 153, 201), (181, 126, 220), (123, 104, 238), (218, 112, 214), (212, 115, 212), (178, 132, 190), (136, 120, 195), (167, 107, 207), (183, 132, 167), (180, 131, 149), (182, 102, 210), (153, 102, 204), (116, 108, 192), (96, 80, 220), (106, 90, 205), (186, 85, 211), (90, 79, 207), (193, 84, 193), (138, 43, 226), (153, 85, 187), (160, 32, 240), (111, 0, 255), (127, 0, 255), (143, 0, 255), (153, 50, 204), (159, 0, 255), (154, 78, 174), (134, 96, 142), (187, 51, 133), (145, 92, 131), (115, 79, 150), (133, 96, 136), (121, 104, 120), (141, 78, 133), (111, 45, 168), (138, 73, 107), (142, 69, 133), (148, 0, 211), (132, 63, 91), (88, 66, 124), (135, 50, 96), (108, 48, 130), (134, 1, 175), (135, 38, 87), (82, 45, 128), (76, 40, 130), (97, 64, 81), (103, 49, 71), (112, 41, 99), (86, 60, 92), (96, 47, 107), (93, 57, 84), (91, 50, 86), (136, 0, 133), (139, 0, 139), (50, 18, 122), (75, 0, 130), (50, 23, 77)]
    black_list = [(0, 0, 0), (47, 79, 79), (8, 8, 8), (16, 12, 8), (27, 27, 27), (61, 12, 2), (0, 66, 66), (0, 64, 64), (36, 33, 36), (37, 53, 41), (59, 60, 54), (82, 89, 59), (112, 66, 65), (103, 72, 70), (85, 93, 80), (85, 85, 85), (65, 74, 76), (54, 69, 79), (68, 76, 56), (69, 77, 50), (72, 60, 50), (38, 67, 72), (53, 56, 57), (53, 66, 48), (67, 48, 46), (50, 23, 77), (51, 51, 51), (52, 52, 52), (28, 40, 65), (60, 52, 31), (86, 3, 25), (0, 73, 83), (60, 20, 20), (35, 43, 43), (72, 6, 7), (18, 53, 36), (50, 20, 20), (26, 36, 33), (0, 0, 54), (0, 0, 57), (44, 22, 8), (26, 17, 16)] 
    brown_list = [(165, 42, 42), (255, 228, 196), (255, 228, 181), (255, 222, 173), (244, 164, 96), (188, 143, 143), (205, 133, 63), (210, 105, 30), (160, 82, 45), (139, 69, 19), (50, 20, 20), (100, 65, 23), (101, 67, 33), (102, 76, 40), (150, 75, 0), (139, 69, 19), (111, 78, 55), (181, 101, 29), (131, 105, 83), (187, 101, 40), (152, 118, 84), (193, 154, 107), (188, 143, 143), (244, 164, 96), (253, 245, 230), (255, 248, 231), (255, 239, 213), (250, 235, 215), (255, 235, 205), (240, 234, 214), (247, 231, 206), (255, 228, 196), (239, 222, 205), (239, 223, 187), (245, 222, 179), (250, 223, 173), (237, 201, 175), (250, 214, 165), (221, 173, 175), (222, 170, 136), (233, 150, 122), (192, 153, 153), (205, 149, 117), (218, 138, 103), (217, 144, 88), (203, 109, 81), (173, 111, 105), (186, 135, 89), (201, 90, 73), (205, 91, 69), (159, 129, 112), (205, 133, 63), (165, 113, 100), (185, 78, 72), (205, 127, 50), (152, 105, 96), (160, 120, 90), (152, 116, 86), (204, 119, 34), (184, 115, 51), (192, 54, 44), (128, 117, 90), (150, 90, 62), (149, 69, 53), (130, 102, 68), (170, 56, 30), (183, 65, 14), (192, 64, 0), (146, 39, 36), (112, 66, 65), (121, 68, 59), (176, 101, 0), (138, 51, 36), (112, 54, 66), (167, 85, 2), (136, 45, 23), (128, 70, 27), (107, 68, 35), (108, 84, 30), (112, 66, 20), (123, 63, 0), (89, 39, 32), (75, 54, 33), (60, 52, 31), (61, 43, 31), (60, 20, 20), (61, 12, 2)]
    grey_list = [(128, 128, 128), (220, 220, 220), (211, 211, 211), (192, 192, 192), (169, 169, 169), (119, 136, 153), (112, 128, 144), (105, 105, 105), (85, 85, 85), (83, 104, 120), (128, 128, 128), (145, 163, 176), (178, 190, 181), (244, 240, 236), (229, 228, 226), (220, 220, 220), (219, 215, 210), (211, 211, 211), (196, 195, 208), (207, 207, 196), (201, 192, 187), (190, 190, 190), (191, 193, 194), (192, 192, 192), (196, 174, 173), (172, 172, 172), (169, 169, 169), (151, 154, 170), (140, 146, 172), (152, 152, 152), (131, 137, 150), (152, 129, 123), (153, 122, 141), (119, 118, 150), (119, 136, 153), (139, 133, 137), (138, 127, 128), (132, 132, 130), (102, 102, 153), (112, 128, 144), (137, 138, 116), (115, 130, 118), (110, 127, 128), (117, 117, 117), (126, 94, 96), (105, 105, 105), (83, 104, 114), (100, 84, 82), (74, 100, 108), (76, 81, 109), (79, 102, 106), (94, 100, 79), (85, 93, 80), (99, 81, 71), (70, 89, 69), (83, 75, 79), (81, 72, 79), (65, 74, 76), (79, 58, 60), (54, 69, 79), (59, 68, 75), (68, 76, 56), (47, 79, 79), (72, 60, 50), (61, 64, 53), (53, 56, 57), (53, 66, 48), (52, 52, 52), (37, 53, 41), (35, 43, 43)]
    white_list = [(255, 255, 255), (248, 248, 255), (255, 250, 250), (245, 255, 250), (240, 248, 255), (240, 255, 240), (240, 255, 255), (255, 240, 245), (255, 245, 238), (255, 250, 240), (255, 255, 240), (245, 245, 245), (253, 245, 230), (250, 240, 230), (245, 245, 220), (250, 235, 215), (249, 255, 227), (242, 243, 244), (245, 245, 245), (255, 250, 240), (248, 248, 255), (254, 254, 250), (255, 250, 250), (245, 255, 250), (248, 244, 255), (253, 255, 245), (240, 248, 255), (240, 255, 240), (240, 255, 255), (255, 240, 245), (255, 245, 238), (255, 255, 240), (245, 245, 220)]
   
    color_categories = {
        "pink": pink_list,
        "red": red_list,
        "orange": orange_list,
        "yellow": yellow_list,
        "green": green_list,
        "blue": blue_list,
        "violet": violet_list,
        "black": black_list,
        "brown": brown_list,
        "grey": grey_list,
        "white": white_list
    }
            
    for category, color_list in color_categories.items():
        for color in color_list:
            if color_tuple in color_list:
                return category
            
    return get_color_from_llm(hex_color)
    
    # use Euclidean distance to find the closest match
    '''closest_color = None
    min_distance = float('inf')
    classified_color = "unknown"
    
    for category, colors in color_categories.items():
        for color in colors:
            dist = color_distance(color_tuple, color)
            if dist < min_distance:
                min_distance = dist
                closest_color = color
                classified_color = category
    
    return classified_color'''

@app.route('/<hex_color>')
def classify(hex_color):
    color_name = classify_color(hex_color)
    
    # HTML and CSS template for the response
    return render_template_string("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Color Classifier</title>
            <style>
                body {
                    font-family: Times New Roman, sans-serif;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                    background-color: #f0f0f0;
                }
                .color-box {
                    width: 300px;
                    height: 300px;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    border-radius: 8px;
                    color: white;
                    font-size: 24px;
                    font-weight: bold;
                    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
                }
                .container {
                    text-align: center;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="color-box" style="background-color: #{{ hex_color }};">
                    <span>{{ color_name }}</span>
                </div>
            </div>
        </body>
        </html>
    """, hex_color=hex_color, color_name=color_name)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
